
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'leftPLUSMINUSleftTIMESDIVIDEMODULOleftLTLEGTGEEQNEleftANDORrightNOTAND ASSIGN CHAR COMMA DIVIDE ELSE EQ FOR GE GT ID IF INT LBRACE LE LPAREN LT MINUS MODULO NE NOT NUMBER OR PLUS RBRACE RETURN RPAREN SEMI STRING TIMES VOID WHILEprogram : fun_declfun_decl : type ID LPAREN param_list RPAREN compound_stmtparam_list : type ID\n                  | param_list COMMA type ID\n                  | VOIDtype : INT\n            | VOID\n            | CHARcompound_stmt : LBRACE stmt_list RBRACEstmt_list : stmt\n                 | stmt stmt_liststmt : expr_stmt\n           | if_stmt\n           | return_stmt\n           | var_declexpr_stmt : expr SEMIif_stmt : IF LPAREN expr RPAREN compound_stmt\n               | IF LPAREN expr RPAREN compound_stmt ELSE compound_stmtreturn_stmt : RETURN expr SEMIvar_decl : type ID SEMIexpr : var ASSIGN expr\n            | var\n            | NUMBER\n            | expr PLUS expr\n            | expr MINUS expr\n            | expr TIMES expr\n            | expr DIVIDE expr\n            | expr MODULO expr\n            | expr LT expr\n            | expr LE expr\n            | expr GT expr\n            | expr GE expr\n            | expr EQ expr\n            | expr NE expr\n            | expr AND expr\n            | expr OR expr\n            | NOT expr\n            | LPAREN expr RPARENvar : ID'
    
_lr_action_items = {'INT':([0,8,14,16,19,20,21,22,23,34,36,71,72,75,77,],[4,4,4,4,4,-12,-13,-14,-15,-9,-16,-19,-20,-17,-18,]),'VOID':([0,8,14,16,19,20,21,22,23,34,36,71,72,75,77,],[5,11,5,5,5,-12,-13,-14,-15,-9,-16,-19,-20,-17,-18,]),'CHAR':([0,8,14,16,19,20,21,22,23,34,36,71,72,75,77,],[6,6,6,6,6,-12,-13,-14,-15,-9,-16,-19,-20,-17,-18,]),'$end':([1,2,15,34,],[0,-1,-2,-9,]),'ID':([3,4,5,6,9,11,16,17,19,20,21,22,23,26,27,28,32,34,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,54,71,72,75,77,],[7,-6,-7,-8,12,-7,29,33,29,-12,-13,-14,-15,29,29,53,29,-9,-16,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,-19,-20,-17,-18,]),'LPAREN':([7,16,19,20,21,22,23,25,26,27,32,34,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,54,71,72,75,77,],[8,26,26,-12,-13,-14,-15,50,26,26,26,-9,-16,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,-19,-20,-17,-18,]),'RPAREN':([10,11,12,29,30,31,33,51,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,73,],[13,-5,-3,-39,-22,-23,-4,70,-37,-24,-25,-26,-27,-28,-29,-30,-31,-32,-33,-34,-35,-36,74,-38,-21,]),'COMMA':([10,11,12,33,],[14,-5,-3,-4,]),'LBRACE':([13,74,76,],[16,16,16,]),'IF':([16,19,20,21,22,23,34,36,71,72,75,77,],[25,25,-12,-13,-14,-15,-9,-16,-19,-20,-17,-18,]),'RETURN':([16,19,20,21,22,23,34,36,71,72,75,77,],[27,27,-12,-13,-14,-15,-9,-16,-19,-20,-17,-18,]),'NUMBER':([16,19,20,21,22,23,26,27,32,34,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,54,71,72,75,77,],[31,31,-12,-13,-14,-15,31,31,31,-9,-16,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,-19,-20,-17,-18,]),'NOT':([16,19,20,21,22,23,26,27,32,34,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,54,71,72,75,77,],[32,32,-12,-13,-14,-15,32,32,32,-9,-16,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,-19,-20,-17,-18,]),'RBRACE':([18,19,20,21,22,23,34,35,36,71,72,75,77,],[34,-10,-12,-13,-14,-15,-9,-11,-16,-19,-20,-17,-18,]),'SEMI':([24,29,30,31,52,53,55,56,57,58,59,60,61,62,63,64,65,66,67,68,70,73,],[36,-39,-22,-23,71,72,-37,-24,-25,-26,-27,-28,-29,-30,-31,-32,-33,-34,-35,-36,-38,-21,]),'PLUS':([24,29,30,31,51,52,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,73,],[37,-39,-22,-23,37,37,-37,-24,-25,-26,-27,-28,-29,-30,-31,-32,-33,-34,-35,-36,37,-38,37,]),'MINUS':([24,29,30,31,51,52,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,73,],[38,-39,-22,-23,38,38,-37,-24,-25,-26,-27,-28,-29,-30,-31,-32,-33,-34,-35,-36,38,-38,38,]),'TIMES':([24,29,30,31,51,52,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,73,],[39,-39,-22,-23,39,39,-37,39,39,-26,-27,-28,-29,-30,-31,-32,-33,-34,-35,-36,39,-38,39,]),'DIVIDE':([24,29,30,31,51,52,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,73,],[40,-39,-22,-23,40,40,-37,40,40,-26,-27,-28,-29,-30,-31,-32,-33,-34,-35,-36,40,-38,40,]),'MODULO':([24,29,30,31,51,52,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,73,],[41,-39,-22,-23,41,41,-37,41,41,-26,-27,-28,-29,-30,-31,-32,-33,-34,-35,-36,41,-38,41,]),'LT':([24,29,30,31,51,52,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,73,],[42,-39,-22,-23,42,42,-37,42,42,42,42,42,-29,-30,-31,-32,-33,-34,-35,-36,42,-38,42,]),'LE':([24,29,30,31,51,52,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,73,],[43,-39,-22,-23,43,43,-37,43,43,43,43,43,-29,-30,-31,-32,-33,-34,-35,-36,43,-38,43,]),'GT':([24,29,30,31,51,52,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,73,],[44,-39,-22,-23,44,44,-37,44,44,44,44,44,-29,-30,-31,-32,-33,-34,-35,-36,44,-38,44,]),'GE':([24,29,30,31,51,52,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,73,],[45,-39,-22,-23,45,45,-37,45,45,45,45,45,-29,-30,-31,-32,-33,-34,-35,-36,45,-38,45,]),'EQ':([24,29,30,31,51,52,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,73,],[46,-39,-22,-23,46,46,-37,46,46,46,46,46,-29,-30,-31,-32,-33,-34,-35,-36,46,-38,46,]),'NE':([24,29,30,31,51,52,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,73,],[47,-39,-22,-23,47,47,-37,47,47,47,47,47,-29,-30,-31,-32,-33,-34,-35,-36,47,-38,47,]),'AND':([24,29,30,31,51,52,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,73,],[48,-39,-22,-23,48,48,-37,48,48,48,48,48,48,48,48,48,48,48,-35,-36,48,-38,48,]),'OR':([24,29,30,31,51,52,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,73,],[49,-39,-22,-23,49,49,-37,49,49,49,49,49,49,49,49,49,49,49,-35,-36,49,-38,49,]),'ASSIGN':([29,30,],[-39,54,]),'ELSE':([34,75,],[-9,76,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'fun_decl':([0,],[2,]),'type':([0,8,14,16,19,],[3,9,17,28,28,]),'param_list':([8,],[10,]),'compound_stmt':([13,74,76,],[15,75,77,]),'stmt_list':([16,19,],[18,35,]),'stmt':([16,19,],[19,19,]),'expr_stmt':([16,19,],[20,20,]),'if_stmt':([16,19,],[21,21,]),'return_stmt':([16,19,],[22,22,]),'var_decl':([16,19,],[23,23,]),'expr':([16,19,26,27,32,37,38,39,40,41,42,43,44,45,46,47,48,49,50,54,],[24,24,51,52,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,73,]),'var':([16,19,26,27,32,37,38,39,40,41,42,43,44,45,46,47,48,49,50,54,],[30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> fun_decl','program',1,'p_program','test.py',95),
  ('fun_decl -> type ID LPAREN param_list RPAREN compound_stmt','fun_decl',6,'p_fun_decl','test.py',101),
  ('param_list -> type ID','param_list',2,'p_param_list','test.py',110),
  ('param_list -> param_list COMMA type ID','param_list',4,'p_param_list','test.py',111),
  ('param_list -> VOID','param_list',1,'p_param_list','test.py',112),
  ('type -> INT','type',1,'p_type','test.py',125),
  ('type -> VOID','type',1,'p_type','test.py',126),
  ('type -> CHAR','type',1,'p_type','test.py',127),
  ('compound_stmt -> LBRACE stmt_list RBRACE','compound_stmt',3,'p_compound_stmt','test.py',132),
  ('stmt_list -> stmt','stmt_list',1,'p_stmt_list','test.py',138),
  ('stmt_list -> stmt stmt_list','stmt_list',2,'p_stmt_list','test.py',139),
  ('stmt -> expr_stmt','stmt',1,'p_stmt','test.py',146),
  ('stmt -> if_stmt','stmt',1,'p_stmt','test.py',147),
  ('stmt -> return_stmt','stmt',1,'p_stmt','test.py',148),
  ('stmt -> var_decl','stmt',1,'p_stmt','test.py',149),
  ('expr_stmt -> expr SEMI','expr_stmt',2,'p_expr_stmt','test.py',154),
  ('if_stmt -> IF LPAREN expr RPAREN compound_stmt','if_stmt',5,'p_if_stmt','test.py',160),
  ('if_stmt -> IF LPAREN expr RPAREN compound_stmt ELSE compound_stmt','if_stmt',7,'p_if_stmt','test.py',161),
  ('return_stmt -> RETURN expr SEMI','return_stmt',3,'p_return_stmt','test.py',170),
  ('var_decl -> type ID SEMI','var_decl',3,'p_var_decl','test.py',176),
  ('expr -> var ASSIGN expr','expr',3,'p_expr','test.py',183),
  ('expr -> var','expr',1,'p_expr','test.py',184),
  ('expr -> NUMBER','expr',1,'p_expr','test.py',185),
  ('expr -> expr PLUS expr','expr',3,'p_expr','test.py',186),
  ('expr -> expr MINUS expr','expr',3,'p_expr','test.py',187),
  ('expr -> expr TIMES expr','expr',3,'p_expr','test.py',188),
  ('expr -> expr DIVIDE expr','expr',3,'p_expr','test.py',189),
  ('expr -> expr MODULO expr','expr',3,'p_expr','test.py',190),
  ('expr -> expr LT expr','expr',3,'p_expr','test.py',191),
  ('expr -> expr LE expr','expr',3,'p_expr','test.py',192),
  ('expr -> expr GT expr','expr',3,'p_expr','test.py',193),
  ('expr -> expr GE expr','expr',3,'p_expr','test.py',194),
  ('expr -> expr EQ expr','expr',3,'p_expr','test.py',195),
  ('expr -> expr NE expr','expr',3,'p_expr','test.py',196),
  ('expr -> expr AND expr','expr',3,'p_expr','test.py',197),
  ('expr -> expr OR expr','expr',3,'p_expr','test.py',198),
  ('expr -> NOT expr','expr',2,'p_expr','test.py',199),
  ('expr -> LPAREN expr RPAREN','expr',3,'p_expr','test.py',200),
  ('var -> ID','var',1,'p_var','test.py',225),
]
